{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/TodoInput.js","components/Todo.js","App/App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","onActionClick","bind","this","title","completed","index","className","style","type","onClick","e","action","event","onTodoItemAction","React","Component","TodoList","listItemsEl","list","length","map","item","i","key","TodoInput","state","todo","onChange","onSubmit","onAddTodoClick","required","value","setState","target","preventDefault","addTodo","Todo","newList","splice","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2fc2ac1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../assets/scss/components/Todo.scss\";\n\nclass TodoItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onActionClick = this.onActionClick.bind(this);\n  }\n\n  render() {\n    const { title, completed, index } = this.props;\n    const { onActionClick } = this;\n\n    return (\n      <li className={completed ? \"-completed\" : null}>\n        <span style={{ \"margin-right\": \"4px\" }}>{title}</span>\n        <button type=\"button\" onClick={e => onActionClick(\"done\", e)}>\n          Done {index}\n        </button>\n        <button type=\"button\" onClick={e => onActionClick(\"delete\", e)}>\n          Delete\n        </button>\n      </li>\n    );\n  }\n\n  // methods\n  onActionClick(action, event) {\n    //! no check if onTodoItemAction is a function\n    const { index, onTodoItemAction } = this.props;\n    onTodoItemAction(index, action, event);\n  }\n}\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n\nclass TodoList extends React.Component {\n  render() {\n    const { list, onTodoItemAction } = this.props;\n    let listItemsEl;\n    if (list.length > 0) {\n      // map thru todo list to do this\n      listItemsEl = list.map((item, i) => (\n        <TodoItem\n          key={i}\n          index={i}\n          {...item}\n          onTodoItemAction={onTodoItemAction}\n        />\n      ));\n    } else {\n      listItemsEl = <div>Nothing to do like you always do!</div>;\n    }\n\n    return <ul className=\"Todo\">{listItemsEl}</ul>;\n  }\n}\n\nexport default TodoList;\n","import React from \"react\";\n\nclass TodoInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todo: { title: \"\", completed: false }\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onAddTodoClick = this.onAddTodoClick.bind(this);\n  }\n\n  render() {\n    const { title } = this.state.todo;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input required type=\"text\" value={title} onChange={this.onChange} />\n        <button>Add todo</button>\n      </form>\n    );\n  }\n\n  // methods\n  onChange(event) {\n    // change input title\n    this.setState({\n      todo: {\n        ...this.state.todo,\n        title: event.target.value\n      }\n    });\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    this.onAddTodoClick(event);\n  }\n\n  onAddTodoClick(event) {\n    //! no check if addTodo is a function\n    // TODO: duplicate todo titles are not checked\n    this.props.addTodo(this.state.todo, event);\n    // then, clear the text\n    this.setState({\n      todo: {\n        ...this.todo,\n        title: \"\"\n      }\n    });\n  }\n}\n\nexport default TodoInput;\n","import React from \"react\";\nimport TodoList from \"../components/TodoList\";\nimport TodoInput from \"../components/TodoInput\";\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\n        { title: \"Study React\", completed: false },\n        { title: \"Learn Redux\", completed: false },\n        { title: \"Give up because it's hard\", completed: true }\n      ]\n    };\n\n    this.addTodo = this.addTodo.bind(this);\n    this.onTodoItemAction = this.onTodoItemAction.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <TodoInput addTodo={this.addTodo} />\n        <TodoList\n          list={this.state.list}\n          onTodoItemAction={this.onTodoItemAction}\n        />\n      </div>\n    );\n  }\n\n  // methods\n  // event also as 2nd arg, but you won't use it anyway\n  addTodo(todo) {\n    this.setState({\n      list: [...this.state.list, todo]\n    });\n  }\n\n  // this thing handles 'done' and 'delete' actions\n  onTodoItemAction(index, action, event) {\n    const { list } = this.state;\n    const newList = [...list];\n\n    switch (action) {\n      case \"done\":\n        // looks complicated, but it just toggles the completed prop\n        newList[index] = {\n          ...list[index],\n          completed: !list[index].completed\n        };\n        break;\n      case \"delete\":\n        // delete the item on that index\n        newList.splice(index, 1);\n        break;\n      default:\n        return false;\n    }\n\n    this.setState({\n      list: newList\n    });\n  }\n}\n\nexport default Todo;\n","import React from \"react\";\nimport Todo from \"../components/Todo\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Todo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// import css assets\nimport \"./assets/scss/index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}